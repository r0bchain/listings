name: Generate a build and push to another branch

on:
  push:
    branches:
      - master # The branch name your are commit the new changes
env:
  # Use the same ssh-agent socket value across all jobs
  # Useful when a GH action is using SSH behind-the-scenes
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
   

jobs:
  setup-ssh:
        runs-on: ubuntu-latest
        steps:
          - name: Setup SSH passphrase
            env:
              SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
              SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            run: |
              eval "$(ssh-agent -s)"
              echo 'echo $SSH_PASSPHRASE' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
              echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null 
              ssh-add -l # List added identities to verify
   
  build:
    runs-on: ubuntu-latest
    name: Build and Push
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      APP_NAME: ${{ vars.APP_NAME }}
      DEFAULT_CATEGORY_IMAGE: ${{ vars.DEFAULT_CATEGORY_IMAGE }}
      TOPICS_IMAGE: ${{ vars.TOPICS_IMAGE }}
      DEFAULT_CITY: ${{ vars.DEFAULT_CITY }}
      RANDOM_IMAGE_KEY: ${{ secrets.RANDOM_IMAGE_KEY }}
      PINATA_SECRET_ACCESS_KEY: ${{ secrets.PINATA_SECRET_ACCESS_KEY }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      APP_DEBUG: ${{ vars.APP_DEBUG }}
    steps:
      - name: git-checkout
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          echo "DEFAULT_CATEGORY_IMAGE=${{ vars.DEFAULT_CATEGORY_IMAGE }}" >> .env
          echo "TOPICS_IMAGE=\"${{ vars.TOPICS_IMAGE }}\"" >> .env
          echo "DEFAULT_CITY=${{ vars.DEFAULT_CITY }}" >> .env
          echo "RANDOM_IMAGE_KEY=${{ secrets.RANDOM_IMAGE_KEY }}" >> .env
          echo "PINATA_SECRET_ACCESS_KEY=${{ secrets.PINATA_SECRET_ACCESS_KEY }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "APP_DEBUG=${{ vars.APP_DEBUG }}" >> .env

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Run composer install
        run: composer install -n --prefer-dist

      - name: Install all dependencies
        run: npm install

      - name: Build
        run: npm run build # The build command of your project

      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: master # The branch name where you want to push the assets
          FOLDER: public/build # The directory where your assets are generated
          TARGET_DIR: public_html
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
          MESSAGE: "Build: ({sha}) {msg}" # The commit message

      - name: Deploy to Hostinger
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          target: /public_html/
          source: ./ # Adjust this to your build directory if needed
          rm: true
          strip_components: 1
       